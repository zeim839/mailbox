// Copyright (c) 2020-2023 Charmbracelet, Inc
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package table

import (
	"fmt"
	"github.com/charmbracelet/bubbles/key"
	"github.com/charmbracelet/bubbles/viewport"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
	"github.com/mattn/go-runewidth"
	"strings"
)

var (
	blurredStyle = lipgloss.NewStyle().Foreground(lipgloss.Color("#bdc3c7"))
	focusedStyle = lipgloss.NewStyle().Foreground(lipgloss.Color("205"))
	baseStyle    = lipgloss.NewStyle().
			BorderStyle(lipgloss.NormalBorder()).
			BorderForeground(lipgloss.Color("240"))
	errStyle = lipgloss.NewStyle().Bold(true).Foreground(lipgloss.Color("#e74c3c"))
)

// Row represents one line in the table.
type Row []string

// Column defines the table structure.
type Column struct {
	Title string
	Width int
}

// DeleteFn is a function that deletes rows.
type DeleteFn func(rows []Row) error

// RefreshFn is a function that refreshes the available rows.
type RefreshFn func() []Row

// Model defines a state for the table widget.
type Model struct {
	KeyMap     KeyMap
	cols       []Column
	rows       []Row
	cursor     int
	marked     []bool
	focus      bool
	styles     Styles
	styleFunc  StyleFunc
	viewport   viewport.Model
	start      int
	end        int
	isExpanded bool
	isDelete   bool
	deleteFn   DeleteFn
	refreshFn  RefreshFn
	err        error
}

// KeyMap defines keybindings. It satisfies to the help.KeyMap interface, which
// is used to render the menu.
type KeyMap struct {
	LineUp     key.Binding
	LineDown   key.Binding
	PageUp     key.Binding
	PageDown   key.Binding
	GotoTop    key.Binding
	GotoBottom key.Binding
	Mark       key.Binding
	Execute    key.Binding
	Expand     key.Binding
}

// ShortHelp implements the KeyMap interface.
func (km KeyMap) ShortHelp() []key.Binding {
	return []key.Binding{km.LineUp, km.LineDown}
}

// FullHelp implements the KeyMap interface.
func (km KeyMap) FullHelp() [][]key.Binding {
	return [][]key.Binding{
		{km.LineUp, km.LineDown, km.GotoTop, km.GotoBottom},
		{km.PageUp, km.PageDown, km.Mark, km.Expand},
	}
}

// DefaultKeyMap returns a default set of keybindings.
func DefaultKeyMap() KeyMap {
	const spacebar = " "
	return KeyMap{
		LineUp: key.NewBinding(
			key.WithKeys("up", "k", "ctrl+p"),
			key.WithHelp("↑/k", "up"),
		),
		LineDown: key.NewBinding(
			key.WithKeys("down", "j", "ctrl+n"),
			key.WithHelp("↓/j", "down"),
		),
		PageUp: key.NewBinding(
			key.WithKeys("b", "pgup"),
			key.WithHelp("b/pgup", "page up"),
		),
		PageDown: key.NewBinding(
			key.WithKeys("f", "pgdown", spacebar),
			key.WithHelp("f/pgdn", "page down"),
		),
		GotoTop: key.NewBinding(
			key.WithKeys("home", "g"),
			key.WithHelp("g/home", "go to start"),
		),
		GotoBottom: key.NewBinding(
			key.WithKeys("end", "G"),
			key.WithHelp("G/end", "go to end"),
		),
		Mark: key.NewBinding(
			key.WithKeys("d", "D"),
			key.WithHelp("d", "mark for deletion"),
		),
		Execute: key.NewBinding(
			key.WithKeys("x", "X"),
			key.WithHelp("x", "execute"),
		),
		Expand: key.NewBinding(
			key.WithKeys("enter"),
			key.WithHelp("enter", "expand"),
		),
	}
}

// Styles contains style definitions for this list component. By default, these
// values are generated by DefaultStyles.
type Styles struct {
	Header   lipgloss.Style
	Cell     lipgloss.Style
	Selected lipgloss.Style
	Marked   lipgloss.Style
}

// DefaultStyles returns a set of default style definitions for this table.
func DefaultStyles() Styles {
	return Styles{
		Selected: lipgloss.NewStyle().Bold(true).Foreground(lipgloss.Color("212")),
		Marked:   lipgloss.NewStyle().Bold(true).Foreground(lipgloss.Color("#e74c3c")),
		Header:   lipgloss.NewStyle().Bold(true).Padding(0, 1),
		Cell:     lipgloss.NewStyle().Padding(0, 1),
	}
}

// SetStyles sets the table styles.
func (m *Model) SetStyles(s Styles) {
	m.styles = s
	m.UpdateViewport()
}

// Option is used to set options in New. For example:
//
//	table := New(WithColumns([]Column{{Title: "ID", Width: 10}}))
type Option func(*Model)

// New creates a new model for the table widget.
func New(opts ...Option) Model {
	m := Model{
		cursor:   0,
		marked:   []bool{},
		viewport: viewport.New(0, 20),
		KeyMap:   DefaultKeyMap(),
		styles:   DefaultStyles(),
	}
	for _, opt := range opts {
		opt(&m)
	}
	m.UpdateViewport()
	return m
}

// WithColumns sets the table columns (headers).
func WithColumns(cols []Column) Option {
	return func(m *Model) {
		m.cols = cols
	}
}

// WithRows sets the table rows (data).
func WithRows(rows []Row) Option {
	return func(m *Model) {
		m.rows = rows
		m.marked = make([]bool, len(rows))
	}
}

// WithDeleteFn sets the deletion callback.
func WithDeleteFn(d DeleteFn) Option {
	return func(m *Model) {
		m.deleteFn = d
	}
}

// WithRefreshFn sets the refresh callback.
func WithRefreshFn(r RefreshFn) Option {
	return func(m *Model) {
		m.refreshFn = r
	}
}

// WithHeight sets the height of the table.
func WithHeight(h int) Option {
	return func(m *Model) {
		m.viewport.Height = h - lipgloss.Height(m.headersView())
	}
}

// WithWidth sets the width of the table.
func WithWidth(w int) Option {
	return func(m *Model) {
		m.viewport.Width = w
	}
}

// WithFocused sets the focus state of the table.
func WithFocused(f bool) Option {
	return func(m *Model) {
		m.focus = f
	}
}

// WithStyles sets the table styles.
func WithStyles(s Styles) Option {
	return func(m *Model) {
		m.styles = s
	}
}

// WithStyleFunc sets the table style func which can determine a cell style per column, row, and selected state.
func WithStyleFunc(f StyleFunc) Option {
	return func(m *Model) {
		m.styleFunc = f
	}
}

// WithKeyMap sets the key map.
func WithKeyMap(km KeyMap) Option {
	return func(m *Model) {
		m.KeyMap = km
	}
}

// Update is the Bubble Tea update loop.
func (m Model) Update(msg tea.Msg) (Model, tea.Cmd) {
	if !m.focus {
		return m, nil
	}
	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch {
		case key.Matches(msg, m.KeyMap.LineUp):
			if m.isExpanded {
				m.isDelete = !m.isDelete
				break
			}
			m.MoveUp(1)
		case key.Matches(msg, m.KeyMap.LineDown):
			if m.isExpanded {
				m.isDelete = !m.isDelete
				break
			}
			m.MoveDown(1)
		case key.Matches(msg, m.KeyMap.PageUp):
			m.MoveUp(m.viewport.Height)
		case key.Matches(msg, m.KeyMap.PageDown):
			m.MoveDown(m.viewport.Height)
		case key.Matches(msg, m.KeyMap.LineDown):
			m.MoveDown(1)
		case key.Matches(msg, m.KeyMap.GotoTop):
			m.GotoTop()
		case key.Matches(msg, m.KeyMap.GotoBottom):
			m.GotoBottom()
		case key.Matches(msg, m.KeyMap.Mark):
			m.Mark()
			m.MoveDown(1)
		case key.Matches(msg, m.KeyMap.Execute):
			rows := []Row{}
			for i, ok := range m.marked {
				if ok {
					rows = append(rows, m.rows[i])
				}
			}
			if m.deleteFn != nil {
				m.err = m.deleteFn(rows)
			}
			if m.refreshFn != nil {
				m.rows = m.refreshFn()
				m.marked = make([]bool, len(m.rows))
			}
			m.UpdateViewport()
		case key.Matches(msg, m.KeyMap.Expand):
			if m.isExpanded && m.isDelete {
				if m.deleteFn != nil {
					m.err = m.deleteFn([]Row{m.SelectedRow()})
				}
				if m.refreshFn != nil {
					m.rows = m.refreshFn()
					m.marked = make([]bool, len(m.rows))
				}
				m.UpdateViewport()
				m.isExpanded = false
				break
			}
			if m.isExpanded && !m.isDelete {
				m.isExpanded = false
				break
			}
			m.isExpanded = true
		}
	}
	return m, nil
}

// Focused returns the focus state of the table.
func (m Model) Focused() bool {
	return m.focus
}

// Focus focuses the table, allowing the user to move around the rows and
// interact.
func (m *Model) Focus() {
	m.focus = true
	m.UpdateViewport()
}

// Blur blurs the table, preventing selection or movement.
func (m *Model) Blur() {
	m.focus = false
	m.UpdateViewport()
}

// View renders the component.
func (m Model) View() string {
	if m.isExpanded && m.SelectedRow() != nil {
		return m.expandedView()
	}
	errMsg := ""
	if m.err != nil {
		errMsg = "\n" + errStyle.Render(m.err.Error())
		m.err = nil
	}
	return baseStyle.Render(m.headersView()+"\n"+m.viewport.View()) +
		errMsg +
		blurredStyle.Render("\n[↑/k ↓/j] Navigate") +
		blurredStyle.Render("         [enter] Expand entry") +
		blurredStyle.Render("\n[d]       Select/deselect") +
		blurredStyle.Render("  [x]     Delete selections") +
		blurredStyle.Render("\n[ctrl+c]  Quit")
}

// UpdateViewport updates the list content based on the previously defined
// columns and rows.
func (m *Model) UpdateViewport() {
	renderedRows := make([]string, 0, len(m.rows))

	// Render only rows from: m.cursor-m.viewport.Height to: m.cursor+m.viewport.Height
	// Constant runtime, independent of number of rows in a table.
	// Limits the number of renderedRows to a maximum of 2*m.viewport.Height
	if m.cursor >= 0 {
		m.start = clamp(m.cursor-m.viewport.Height, 0, m.cursor)
	} else {
		m.start = 0
	}
	m.end = clamp(m.cursor+m.viewport.Height, m.cursor, len(m.rows))
	for i := m.start; i < m.end; i++ {
		renderedRows = append(renderedRows, m.renderRow(i))
	}
	m.viewport.SetContent(
		lipgloss.JoinVertical(lipgloss.Left, renderedRows...),
	)
}

// SelectedRow returns the selected row.
// You can cast it to your own implementation.
func (m Model) SelectedRow() Row {
	if m.cursor < 0 || m.cursor >= len(m.rows) {
		return nil
	}
	return m.rows[m.cursor]
}

// Rows returns the current rows.
func (m Model) Rows() []Row {
	return m.rows
}

// Columns returns the current columns.
func (m Model) Columns() []Column {
	return m.cols
}

// SetRows sets a new rows state.
func (m *Model) SetRows(r []Row) {
	m.rows = r
	m.UpdateViewport()
}

// SetColumns sets a new columns state.
func (m *Model) SetColumns(c []Column) {
	m.cols = c
	m.UpdateViewport()
}

// SetWidth sets the width of the viewport of the table.
func (m *Model) SetWidth(w int) {
	m.viewport.Width = w
	m.UpdateViewport()
}

// SetHeight sets the height of the viewport of the table.
func (m *Model) SetHeight(h int) {
	m.viewport.Height = h - lipgloss.Height(m.headersView())
	m.UpdateViewport()
}

// Height returns the viewport height of the table.
func (m Model) Height() int {
	return m.viewport.Height
}

// Width returns the viewport width of the table.
func (m Model) Width() int {
	return m.viewport.Width
}

// Cursor returns the index of the selected row.
func (m Model) Cursor() int {
	return m.cursor
}

// SetCursor sets the cursor position in the table.
func (m *Model) SetCursor(n int) {
	m.cursor = clamp(n, 0, len(m.rows)-1)
	m.UpdateViewport()
}

// MoveUp moves the selection up by any number of rows.
// It can not go above the first row.
func (m *Model) MoveUp(n int) {
	m.cursor = clamp(m.cursor-n, 0, len(m.rows)-1)
	switch {
	case m.start == 0:
		m.viewport.SetYOffset(clamp(m.viewport.YOffset, 0, m.cursor))
	case m.start < m.viewport.Height:
		m.viewport.YOffset = (clamp(clamp(m.viewport.YOffset+n, 0, m.cursor), 0, m.viewport.Height))
	case m.viewport.YOffset >= 1:
		m.viewport.YOffset = clamp(m.viewport.YOffset+n, 1, m.viewport.Height)
	}
	m.UpdateViewport()
}

// MoveDown moves the selection down by any number of rows.
// It can not go below the last row.
func (m *Model) MoveDown(n int) {
	m.cursor = clamp(m.cursor+n, 0, len(m.rows)-1)
	m.UpdateViewport()

	switch {
	case m.end == len(m.rows) && m.viewport.YOffset > 0:
		m.viewport.SetYOffset(clamp(m.viewport.YOffset-n, 1, m.viewport.Height))
	case m.cursor > (m.end-m.start)/2 && m.viewport.YOffset > 0:
		m.viewport.SetYOffset(clamp(m.viewport.YOffset-n, 1, m.cursor))
	case m.viewport.YOffset > 1:
	case m.cursor > m.viewport.YOffset+m.viewport.Height-1:
		m.viewport.SetYOffset(clamp(m.viewport.YOffset+1, 0, 1))
	}
}

// GotoTop moves the selection to the first row.
func (m *Model) GotoTop() {
	m.MoveUp(m.cursor)
}

// GotoBottom moves the selection to the last row.
func (m *Model) GotoBottom() {
	m.MoveDown(len(m.rows))
}

// Mark the current cursor position to indicate that the underlying
// document will be deleted.
func (m *Model) Mark() {
	if m.cursor < 0 || m.cursor >= len(m.rows) {
		return
	}
	m.marked[m.cursor] = !m.marked[m.cursor]
}

// FromValues create the table rows from a simple string. It uses `\n` by
// default for getting all the rows and the given separator for the fields on
// each row.
func (m *Model) FromValues(value, separator string) {
	rows := []Row{}
	for _, line := range strings.Split(value, "\n") {
		r := Row{}
		for _, field := range strings.Split(line, separator) {
			r = append(r, field)
		}
		rows = append(rows, r)
	}
	m.SetRows(rows)
}

// StyleFunc is a function that can be used to customize the style of a table cell based on the row and column index.
type StyleFunc func(row, col int, value string) lipgloss.Style

func (m Model) headersView() string {
	s := make([]string, 0, len(m.cols))
	for _, col := range m.cols {
		if col.Width <= 0 {
			continue
		}
		style := lipgloss.NewStyle().Width(col.Width).MaxWidth(col.Width).Inline(true)
		renderedCell := style.Render(runewidth.Truncate(col.Title, col.Width, "…"))
		s = append(s, m.styles.Header.Render(renderedCell))
	}
	return lipgloss.JoinHorizontal(lipgloss.Left, s...)
}

func wrapText(text string, maxLen int) string {
	var result strings.Builder
	var currentLine strings.Builder
	words := strings.Fields(text)
	for _, word := range words {
		if currentLine.Len()+len(word) > maxLen {
			result.WriteString(currentLine.String() + "\n")
			currentLine.Reset()
		}
		if currentLine.Len() > 0 {
			currentLine.WriteString(" ")
		}
		currentLine.WriteString(word)
	}
	result.WriteString(currentLine.String())
	return result.String()
}

func (m Model) expandedView() string {
	row := m.SelectedRow()
	if row == nil {
		return ""
	}
	data := []string{}
	for i, column := range m.cols {
		if column.Title == "Message" {
			data = append(data, "------\n", column.Title, ":\n\n", wrapText(row[i], 60), "\n")
			continue
		}
		data = append(data, column.Title, ": ", row[i], "\n")
	}

	deleteButton := fmt.Sprintf("[ %s ]", blurredStyle.Render("Delete"))
	cancelButton := fmt.Sprintf("[ %s ]", blurredStyle.Render("Cancel"))
	if m.isDelete {
		deleteButton = focusedStyle.Render("[ Delete ]")
	} else {
		cancelButton = focusedStyle.Render("[ Cancel ]")
	}

	return baseStyle.Render(strings.Join(data[:], "")) + "\n" +
		cancelButton + deleteButton
}

func (m *Model) renderRow(r int) string {
	s := make([]string, 0, len(m.cols))
	for i, value := range m.rows[r] {
		if m.cols[i].Width <= 0 {
			continue
		}
		var cellStyle lipgloss.Style
		if m.styleFunc != nil {
			cellStyle = m.styleFunc(r, i, value)
			if r == m.cursor {
				cellStyle = cellStyle.Inherit(m.styles.Selected)
			}
			if m.marked[r] {
				cellStyle = cellStyle.Inherit(m.styles.Marked)
			}
		} else {
			cellStyle = m.styles.Cell
		}

		style := lipgloss.NewStyle().Width(m.cols[i].Width).MaxWidth(m.cols[i].Width).Inline(true)
		renderedCell := cellStyle.Render(style.Render(runewidth.Truncate(value, m.cols[i].Width, "…")))
		s = append(s, renderedCell)
	}

	row := lipgloss.JoinHorizontal(lipgloss.Left, s...)

	// Cursor style takes priority.
	if r == m.cursor {
		return m.styles.Selected.Render(row)
	}

	if m.marked[r] {
		return m.styles.Marked.Render(row)
	}

	return row
}

func max(a, b int) int {
	if a > b {
		return a
	}

	return b
}

func min(a, b int) int {
	if a < b {
		return a
	}

	return b
}

func clamp(v, low, high int) int {
	return min(max(v, low), high)
}
